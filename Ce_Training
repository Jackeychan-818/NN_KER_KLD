import math
import numpy as np
import torch
import random
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
import matplotlib.pyplot as plt

# Function to set the seed for reproducibility
def set_seed(seed):
    random.seed(seed)
    np.random.seed(seed)
    torch.manual_seed(seed)
    if torch.cuda.is_available():
        torch.cuda.manual_seed(seed)
        torch.cuda.manual_seed_all(seed)  # if you are using multi-GPU.
    torch.backends.cudnn.benchmark = False
    torch.backends.cudnn.deterministic = True

# Set the seed
set_seed(100)

class Net(nn.Module):
    def __init__(self):
        super(Net, self).__init__()
        self.conv1 = nn.Conv2d(1, 32, 3, 1)
        self.conv2 = nn.Conv2d(32, 64, 3, 1)
        self.dropout1 = nn.Dropout(0.25)
        self.dropout2 = nn.Dropout(0.5)
        self.fc1 = nn.Linear(9216, 128)
        self.fc2 = nn.Linear(128, 1)

    def forward(self, x):
        x = self.conv1(x)
        x = F.relu(x)
        x = self.conv2(x)
        x = F.relu(x)
        x = F.max_pool2d(x, 2)
        x = self.dropout1(x)
        x = torch.flatten(x, 1)
        x = self.fc1(x)
        x = F.relu(x)
        x = self.dropout2(x)
        x = self.fc2(x)
        output = torch.sigmoid(x)
        return output

if __name__ == '__main__':
    transform = transforms.Compose([transforms.ToTensor(), transforms.Normalize((0.5,), (0.5,))])
    train_set = torchvision.datasets.MNIST(root='./data', train=True, download=True, transform=transform)
    train_loader = torch.utils.data.DataLoader(train_set, batch_size=512, shuffle=True, drop_last=True)
    test_set = torchvision.datasets.MNIST(root='./data', train=False, download=True, transform=transform)
    test_loader = torch.utils.data.DataLoader(test_set, batch_size=1000, shuffle=False, drop_last=True)

    device = torch.device('mps') if torch.backends.mps.is_built() else torch.device('cpu')
    model = Net().to(device)

    optimizer = optim.Adam(model.parameters(), lr=0.001)
    criterion = nn.BCELoss()

    train_losses = []

    # Training loop
    for epoch in range(10):
        model.train()
        epoch_loss = 0
        total_num = 0
        true_num = 0
        for i, (data, target) in enumerate(train_loader):
            data, target = data.to(device), target.to(device)
            index = (target == 0) | (target == 1)
            data = data[index].float()  # Convert data to float
            target = target[index].float().unsqueeze(1)  # Convert target to float and reshape

            optimizer.zero_grad()
            out = model(data)
            total_num += len(target)

            ce_loss = criterion(out, target)
            out_class = (out > 0.5).float()
            true_num += torch.sum(out_class == target)

            loss = ce_loss  # loss function
            loss.backward()  # backward
            optimizer.step()  # update
            epoch_loss += loss.item()

        avg_epoch_loss = epoch_loss / total_num
        train_losses.append(avg_epoch_loss)
        print(f'Train Epoch: {epoch} \tLoss: {avg_epoch_loss:.6f}')
        print(f'Accuracy: {true_num / total_num:.6f}')

    # Save the trained model
        torch.save(model.state_dict(), 'mnist_cnn_bce.pth')

    # Evaluation on the test set
        model.eval()
        test_loss = 0
        correct = 0
        total = 0
        with torch.no_grad():
            for data, target in test_loader:
                data, target = data.to(device), target.to(device)
                index = (target == 0) | (target == 1)
                data = data[index].float()
                target = target[index].float().unsqueeze(1)

                output = model(data)
                test_loss += criterion(output, target).item()
                pred = (output > 0.5).float()
                correct += pred.eq(target).sum().item()
                total += len(target)

        test_loss /= total
        accuracy = correct / total
        print(f'\nTest set: Average loss: {test_loss:.4f}, Accuracy: {correct}/{total} ({accuracy:.4f})\n')
